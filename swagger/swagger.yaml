openapi: '3.0.0'
info:
  title: Blog API - learnCodeWithSaddam
  description: |
    A **Free Open Source Blog REST API** that allows users to sign up, log in, and perform actions like creating, updating, deleting, reviewing, commenting, and searching blog posts, with pagination support. It includes robust user authentication features such as forgot password, reset password, and email verification.

    Admins can manage users and posts, including creating, updating, deleting, and setting permissions, ensuring effective content moderation and platform control.
  version: 1.0.1
  contact:
    name: Saddam Arbaa
    email: 'saddamarbaas@gmail.com'
    url: 'https://www.linkedin.com/in/saddamarbaa/'
  license:
    name: 'Apache 2.0'
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'

servers:
  - url: '{serverUrl}/api/{apiVersion}'
    variables:
      apiVersion:
        default: v1
        enum:
          - v1
          - v2
          - v3
      serverUrl:
        description: Environment -  Production, Staging, Test or Dev
        default: http://localhost:8000
        enum:
          - https://saddam-rest-api.herokuapp.com
          - https://saddam-rest-api.herokuapp.com
          - https://saddam-rest-api.herokuapp.com
          - http://localhost:8000

paths:
  # Root Health Check
  # /:
  #   get:
  #     summary: Root endpoint
  #     responses:
  #       '200':
  #         description: Welcome message
  #         content:
  #           application/json:
  #             schema:
  #               '$ref': '#/components/schemas/RootEndpointResponse'

  # API Version 1 Health Check

  /:
    get:
      summary: Root endpoint (API Version 1)
      tags:
        - HealthCheck
      responses:
        '200':
          description: API version 1 route
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ApiV1WelcomingResponse'

  # Health Check

  /healthChecker:
    get:
      summary: Api health check endpoint
      tags:
        - HealthCheck
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/HealthCheckResponse'

  # Auth
  paths:

  /auth/signup:
    post:
      summary: 'Create a new user'
      description: 'This endpoint creates a new user'
      operationId: 'createUser'
      tags:
        - Auth
      requestBody:
        description: 'User object to be created'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        '200':
          description: 'User created successfully'
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification lik which is been send with the response body to verfiy your email
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: 'string'
                          emailVerificationLinkToken:
                            type: string

        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/verify-email/{userId}/{token}:
    get:
      summary: Verify auth email
      tags:
        - Auth
      description:
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
        - in: path
          name: token
          required: true
          description: Unique token
          schema:
            type: string
            minimum: 1
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2Mzk0Yjc1ZDIyZjQ3MzJiZmE3Y2E2ZWYiLCJpYXQiOjE2NzA2OTI5NzgsImV4cCI6MTcwMjI1MDU3OCwiYXVkIjoiNjM5NGI3NWQyMmY0NzMyYmZhN2NhNmVmIiwiaXNzIjoidGVzdG5kb2Vqcy5jb20ifQ.lb-IL1iEI8yIth62i8pwj7N8C-Ce5QVfsKNBIb9Pa7k
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Your account has been successfully verified . Please Login
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/login:
    post:
      summary: Logs in and returns the authentication  cookie and token
      tags:
        - Auth
      requestBody:
        required: true
        description: A JSON object containing the login and password.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: testverstion@gmail.com
                password:
                  type: string
                  example: 12345test
      security: [] # no authentication
      responses:
        '200':
          description: >
            Successfully authenticated. The accessToken ane refreshToken are returned in a cookie named `accessToken`, `refreshToken`. You need to include this cookie in subsequent requests or include Ber token which will be returned as well.
          headers:
            Set-Cookie:
              schema:
                type: string
                example: JSESSIONID=abcde12345; Path=/; HttpOnly

          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logged in successful
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                      authToken:
                        type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/logout:
    post:
      summary: Un authenticate a user
      tags:
        - Auth
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2MzU4YmU5YWNhMzBiOThlMGU2OGQwM2QiLCJpYXQiOjE2NzAxNTUxODEsImV4cCI6MTcwMTcxMjc4MSwiYXVkIjoiNjM1OGJlOWFjYTMwYjk4ZTBlNjhkMDNkIiwiaXNzIjoidGVzdG5kb2Vqcy5jb20ifQ.CIAighkM5LkNMRZ4pnzhZ-sjXurZA8Sd1qKq4VYuZXw

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logout success
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/refresh-token:
    post:
      summary: Get new access and refresh token
      tags:
        - Auth
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  minimum: 1
                  example: 6358c27dca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logged in successful.
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: 'string'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/profile:
    get:
      security:
        - Authorization: []
      summary: Return user profile
      tags:
        - Auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: 'Successfully found user profile 🍀'
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/update/{userId}:
    patch:
      security:
        - Authorization: []
      summary: Edit user based on request id
      tags:
        - Auth
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully updated post by ID ...
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/remove/{userId}:
    delete:
      security:
        - Authorization: []
      summary: Delete user based on request id
      tags:
        - Auth
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted user by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/forget-password:
    post:
      summary: Allow user to get new password (send rest password token to user email)
      tags:
        - Auth
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
                  minimum: 1
                  example: 6358c27dca30b98e0e68d063
                email:
                  type: string
                  example: testverstion@gmail.com
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Auth logged in successful.
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: 'string'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /auth/reset-password/{userId}/{token}:
    post:
      summary: Endpoint to rest user password using magic link which is been sent to their email
      tags:
        - Auth
      description:
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c27dca30b98e0e68d063
        - in: path
          name: token
          required: true
          description: Unique token
          schema:
            type: string
            minimum: 1
            example: 6358c27dca30b98e0e68d063
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  minimum: 1
                  example: 6358c27dca30
                confirmPassword:
                  type: string
                  example: 6358c27dca30
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Your password has been Password Reset Successfully updated please login
                  data:
                    type: object
                    properties:
                      User:
                        type: object
                        properties:
                          loginLink:
                            type: string

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # User

  /user/users:
    get:
      security:
        - Authorization: []
      summary: Retrieve all users
      tags:
        - User

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: All users retrieved successfully
                  data:
                    type: object
                    properties:
                      'users:':
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /user/{userId}:
    get:
      security:
        - Authorization: []
      summary: Retrieve details of a specific user by userId
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User retrieved successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /user/{userId}/follow:
    put:
      security:
        - Authorization: []
      summary: Flow given user based on request id
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User has been followed successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /user/{userId}/un-follow:
    put:
      security:
        - Authorization: []
      summary: Un flow given user based on request id
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User has been un followed successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /user/{userId}/block:
    put:
      security:
        - Authorization: []
      summary: Block a given user based on request ID
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User has been blocked successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /user/{userId}/unblock:
    put:
      security:
        - Authorization: []
      summary: Unblock a given user based on request ID
      tags:
        - User
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User has been unblocked successfully
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Post

  /posts:
    get:
      summary: Returns a list of posts (can search, sort by each filed, filter by each filed)
      tags:
        - Post
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 10
          description: The numbers of items to return (the default value is 20)
        - in: query
          name: page
          schema:
            type: integer
            # minimum: 1
            # example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: sort
          schema:
            type: string
            example:
          description: Sort query
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Filter by Category name (Example - coding,sports,social,blockchain,devapp,nodejs)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200':
          # status code
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    post:
      security:
        - Authorization: []
      summary: Add a new post
      tags:
        - Post
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
            encoding:
              postImage:
                contentType: application/octet-stream

      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Successfully added new post
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/timeline:
    get:
      summary: Returns a list of timeline posts for auth user
      tags:
        - Post
      security:
        - Authorization: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/{postId}:
    get:
      summary: Get post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63baa65d8d3ae49ad7361509
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    patch:
      security:
        - Authorization: []
      summary: Update post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully update post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted post by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/{postId}/like:
    put:
      security:
        - Authorization: []
      summary: Like or unlike post based on request id
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully like/un-like post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/user-posts:
    get:
      summary: Returns a list of auth user posts
      tags:
        - Post
      security:
        - Authorization: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found all posts for user by ID ...
                  data:
                    type: object
                    properties:
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete all posts for given user
      tags:
        - Post
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted post by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/comment:
    put:
      security:
        - Authorization: []
      summary: Add comment to post
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/addPostCommentRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully update comment  by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

    patch:
      security:
        - Authorization: []
      summary: Update comment
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/updatePostCommentRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully add comment to post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete one comment based on request id
      tags:
        - Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/DeletePostCommentRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully delete comment by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/comment/{postId}:
    get:
      summary: Get all comments in the given post
      tags:
        - Post
      security:
        - Authorization: []
      description:
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found all comments for post by ID ...
                  data:
                    type: object
                    properties:
                      comments:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostCommentResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete all comments in the given post
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted all comments in post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/user-comment/{postId}:
    get:
      summary: Get all comments for the current login user in the given post
      tags:
        - Post
      security:
        - Authorization: []
      description:
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found all your comment in post by ID ...
                  data:
                    type: object
                    properties:
                      comments:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/PostCommentResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete all comments for the current login user or the given user in the given post
      tags:
        - Post
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully delete all user comments in post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/PostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /posts/comment/{postId}/{commentId}:
    get:
      summary: Get one comment based on request id
      tags:
        - Post
      security:
        - Authorization: []
      description:
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
        - in: path
          name: commentId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6394b75d22f4732bfa7ca6ef
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found comment by ID ...
                  data:
                    type: object
                    properties:
                      comment:
                        type: object
                        '$ref': '#/components/schemas/PostCommentResponse'

  # Admin

  /admin/users/add:
    post:
      security:
        - Authorization: []
      summary: Admin add new user
      tags:
        - Admin
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminAddUserRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification lik which is been send with the response body to verfiy your email
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'
  /admin/users:
    get:
      security:
        - Authorization: []
      summary: Returns a list of users whose role is (user, admin, manger, moderator)
      tags:
        - Admin
      description: admin only api
      parameters:
        - in: header
          name: authToken
          description: Admin authorization access token
          schema:
            type: string
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 20
          description: The numbers of items to return (the default value is 20)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: filterBy
          schema:
            type: string
            example:
          description: Filter type (Example - role)
        - in: query
          name: role
          schema:
            type: string
            example:
          description: Role name (Example - user')
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - Saddam)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminAuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/users/{userId}:
    get:
      security:
        - Authorization: []
      summary: Get user info based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully updated post by ID ...
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/users/update/{userId}:
    put:
      security:
        - Authorization: []
      summary: Edit user based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 639593f33994948bfb0756d0
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AdminAuthRequest'

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully updated post by ID ...
                  data:
                    type: object
                    '$ref': '#/components/schemas/AuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/users/remove/{userId}:
    delete:
      security:
        - Authorization: []
      summary: Delete user based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 6358c2odca30b98e0e68d063
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted user by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts:
    get:
      summary: Returns a list of posts with full info of their creator
      tags:
        - Admin
      security:
        - Authorization: []
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 10
          description: The numbers of items to return (the default value is 10)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: filterBy
          schema:
            type: string
            example:
          description: Filter type (Example - category)
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Category name (Example - coding)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    post:
      security:
        - Authorization: []
      summary: Admin add a new post
      tags:
        - Admin
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Successfully added new post
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/{postId}:
    get:
      summary: Return post based on request id
      tags:
        - Admin
      security:
        - Authorization: []
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63baa65d8d3ae49ad7361509
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully found post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    patch:
      security:
        - Authorization: []
      summary: Admin update post based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bb7445b2380d639ceed719
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              '$ref': '#/components/schemas/PostRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully update post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

    delete:
      security:
        - Authorization: []
      summary: Admin delete single post based on request id
      tags:
        - Admin
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted post by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/user/{userId}:
    delete:
      security:
        - Authorization: []
      summary: Admin delete all posts for given user
      tags:
        - Admin
      parameters:
        - in: path
          name: userId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted all posts for user by ID ...
                  data:
                    type: object
                    nullable: true
                    example: null
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/clear-all-posts:
    delete:
      summary: Admin delete all the posts in db
      security:
        - Authorization: []
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Cleared all posts
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/comment/{postId}:
    delete:
      security:
        - Authorization: []
      summary: Admin delete all comments in the given post
      tags:
        - Admin
      parameters:
        - in: path
          name: postId
          required: true
          description: Unique id
          schema:
            type: string
            minimum: 1
            example: 63bae1dbc7c5b2f65f3cbd97
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully deleted all comments in post by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /admin/feed/posts/comment:
    delete:
      security:
        - Authorization: []
      summary: Admin delete one comment based on request id
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/DeletePostCommentRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully delete comment by ID ...
                  data:
                    type: object
                    properties:
                      post:
                        type: object
                        '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Manager

  /manager/users:
    get:
      security:
        - Authorization: []
      summary: Returns a list of users whose role is user
      tags:
        - Manager
      description: admin only api
      parameters:
        - in: header
          name: authToken
          description: Authorization access token
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminAuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /manager/orders:
    get:
      summary: Returns a list of orders for customer whose role is user
      security:
        - Authorization: []
      tags:
        - Manager
      description:
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found all orders
                  data:
                    type: object
                    properties:
                      orders:
                        type: object
                        '$ref': '#/components/schemas/AdminOrderResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  /manager/feed/posts:
    get:
      summary: Returns a list of posts which created by customer whose role is a user
      tags:
        - Manager
      security:
        - Authorization: []
      description:
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            example: 10
          description: The numbers of items to return (the default value is 10)
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            example: 1
          description: Pagination page number (the default value is 1)
        - in: query
          name: filterBy
          schema:
            type: string
            example:
          description: Filter type (Example - category)
        - in: query
          name: category
          schema:
            type: string
            example:
          description: Category name (Example - coding)
        - in: query
          name: search
          schema:
            type: string
            example:
          description: search term (Example - nodejs)
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successful Found posts
                  data:
                    type: object
                    properties:
                      totalDocs:
                        type: integer
                        minimum: 0
                      totalPages:
                        type: integer
                      lastPage:
                        type: integer
                      count:
                        type: integer
                      currentPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      nextPage:
                        type: object
                        properties:
                          page:
                            type: integer
                            minimum: 1
                          limit:
                            type: integer
                            minimum: 1
                      posts:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminPostResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Moderator

  /moderator/users:
    get:
      security:
        - Authorization: []
      summary: Returns a list of users whose role is user or client
      tags:
        - Moderator
      description: moderator only api
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          type: object
                          '$ref': '#/components/schemas/AdminAuthResponse'

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  # Supervisor

  /supervisor:
    get:
      security:
        - Authorization: []
      summary: supervisor role api
      tags:
        - Supervisor api - (todo)
      description: supervisor only api
      parameters:
        - in: header
          name: authToken
          description: Authorization access token
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                    description:
                  error:
                    type: boolean
                    example: false
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Success
                  data:
                    type: object
                    nullable: true
                    example: null

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'

  #  filestream
  /pdf-test:
    get:
      summary: Api for testing pdf document serve (Returns PDF file)
      tags:
        - PDF - filestream
      responses:
        '200':
          description: OK
          content:
            application/pdf:
              schema:
                type: string
                format: binary

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/BadRequestResponse'

        '500':
          description: 500 Internal Server Error
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/ServerErrorResponse'
  # Deprecated APIs

  /test/healthChecker:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /checkout:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /auth/me:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /admin/posts/{postId}:
    get:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

    patch:
      security:
        - Authorization: []
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      deprecated: true
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

    delete:
      security:
        - Authorization: []
      summary: Delete post based on request id
      tags:
        - Deprecated APIs
      deprecated: true
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

  /moderator/users/band/{userId}:
    delete:
      deprecated: true
      summary: This endpoint is been deprecated
      tags:
        - Deprecated APIs
      responses:
        '410':
          description: Deprecated
          content:
            application/json:
              schema:
                schema:
                '$ref': '#/components/schemas/DeprecatedApiResponse'

components:
  schemas:
    RootEndpointResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description:
        error:
          type: boolean
          example: false
        status:
          type: integer
          example: 200
        message:
          type: string
          example: 'Welcome to the API - 👋🌎🌍🌏 - Use /api/v1 for the latest version'
        data:
          type: object
          nullable: true
          example: null

    ApiV1WelcomingResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description:
        error:
          type: boolean
          example: false
        status:
          type: integer
          example: 200
        message:
          type: string
          example: 'Welcome to the API - 👋🌎🌍🌏 - Use /api/v1 for the latest version'
        data:
          type: object
          nullable: true
          example: null
    HealthCheckResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description:
        error:
          type: boolean
          example: false
        status:
          type: integer
          example: 200
        message:
          type: string
          example: 'Welcome to Rest API - 👋🌎🌍🌏 - health check confirm'
        data:
          type: object
          properties:
            uptime:
              type: string
              default: '34 seconds'
            dbStatus:
              type: string
              default: 'Connected'

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          required: true
        surname:
          type: string
        email:
          type: string
          required: true
        dateOfBirth:
          type: string
        gender:
          type: string
        profileImage:
          type: string
        mobileNumber:
          type: string
        bio:
          type: string

    AuthRequest:
      type: object
      properties:
        firstName:
          type: string
          description: 'The first name of the user'
          example: 'John'
        lastName:
          type: string
          description: 'The last name of the user'
          example: 'Doe'
        email:
          type: string
          description: 'The email address of the user'
          example: 'testverstion@gmail.com'
        password:
          type: string
          description: 'The password for the user'
          example: '12345test'
        confirmPassword:
          type: string
          description: 'Confirm the password entered by the user'
          example: '12345test'
        bio:
          type: string
          description: 'A short bio of the user'
          example: 'I am a software developer.'
        skills:
          type: array
          items:
            type: string
          description: 'List of skills the user has'
          example: ['JavaScript', 'React', 'Node.js']
        # profileUrl:
        #   type: string
        #   format: uri
        #   description: 'URL to the user profile image'
        #   example: 'https://example.com/profile.jpg'
        acceptTerms:
          type: boolean
          description: 'Indicates if the user accepts the terms and conditions'
          example: true
        phoneNumber:
          type: string
          description: 'The user phone number'
          example: '+1234567890'
        gender:
          type: string
          description: 'The gender of the user'
          enum:
            - 'male'
            - 'female'
            - 'other'
          example: 'male'
        userAward:
          type: string
          description: 'Award the user has received'
          enum:
            - 'Gold'
            - 'Silver'
            - 'Bronze'
          example: 'Gold'
        plan:
          type: string
          description: 'The user plan selection'
          enum:
            - 'Free'
            - 'Premium'
            - 'Enterprise'
          example: 'Free'
        dateOfBirth:
          type: string
          format: date
          description: 'The user date of birth'
          example: '1990-01-01'

      required:
        - firstName
        - lastName
        - email
        - password
        - confirmPassword
        - acceptTerms

    AuthResponse:
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
          required: true
        lastName:
          type: string
        email:
          type: string
          required: true
        dateOfBirth:
          type: string
        gender:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        profileUrl:
          type: string
        mobileNumber:
          type: string
        bio:
          type: string
        followings:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        followers:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        blocked:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'

    UpdateProfileRequest:
      type: object
      properties:
        firstName:
          type: string
          description: 'The first name of the user'
          example: 'John'
        lastName:
          type: string
          description: 'The last name of the user'
          example: 'Doe'
        email:
          type: string
          description: 'The email address of the user'
          example: 'testverstion@gmail.com'
        bio:
          type: string
          description: 'A short bio of the user'
          example: 'I am a software developer.'
        skills:
          type: array
          items:
            type: string
          description: 'List of skills the user has'
          example: ['JavaScript', 'React', 'Node.js']
        profileUrl:
          type: string
          format: uri
          description: 'URL to the user profile image'
          example: 'https://tse3.mm.bing.net/th?id=OIP.W4S-DdCjOjUS4LqYNUieYwHaHa&pid=Api&P=0&h=220'
        phoneNumber:
          type: string
          description: 'The user phone number'
          example: '+1234567890'
        gender:
          type: string
          description: 'The gender of the user'
          enum:
            - 'male'
            - 'female'
            - 'other'
          example: 'male'
        userAward:
          type: string
          description: 'Award the user has received'
          enum:
            - 'Gold'
            - 'Silver'
            - 'Bronze'
          example: 'Gold'
        plan:
          type: string
          description: 'The user plan selection'
          enum:
            - 'Free'
            - 'Premium'
            - 'Enterprise'
          example: 'Free'
        dateOfBirth:
          type: string
          format: date
          description: 'The user date of birth'
          example: '1990-01-01'
        profileImage:
          type: string
          format: binary

    AdminAuthRequest:
      type: object
      description: Model containing admin auth request info
      properties:
        role:
          type: string
          enum:
            - 'user'
            - 'admin'
            - 'manger'
            - 'supervisor'
            - 'moderator'
            - 'guide'
            - 'client'
          default: 'user'
        status:
          type: string
          enum:
            - 'pending'
            - 'active'
          default: 'active'
        firstName:
          type: string
          example: test
        lastName:
          type: string
          example: test
        email:
          type: string
          example: testverstion@gmail.com
        acceptTerms:
          type: boolean
          default: true
        dateOfBirth:
          type: string
          example: '09/10/1984'

        mobileNumber:
          type: string
          example: '+62213147666'
        bio:
          type: string
          example: 'Software Engineer experienced in developing full-stack JavaScript/Typescript application primarily with React/Next/Redux and Node/Express server design'

        skills:
          type: array
          items:
            type: string
          description: 'List of skills the user has'
          example: ['JavaScript', 'React', 'Node.js']
        profileUrl:
          type: string
          format: uri
          description: 'URL to the user profile image'
          example: 'https://tse3.mm.bing.net/th?id=OIP.W4S-DdCjOjUS4LqYNUieYwHaHa&pid=Api&P=0&h=220'
        phoneNumber:
          type: string
          description: 'The user phone number'
          example: '+1234567890'
        gender:
          type: string
          description: 'The gender of the user'
          enum:
            - 'male'
            - 'female'
            - 'other'
          example: 'male'
        userAward:
          type: string
          description: 'Award the user has received'
          enum:
            - 'Gold'
            - 'Silver'
            - 'Bronze'
          example: 'Gold'
        plan:
          type: string
          description: 'The user plan selection'
          enum:
            - 'Free'
            - 'Premium'
            - 'Enterprise'
          example: 'Free'
        profileImage:
          type: string
          format: binary

    AdminAddUserRequest:
      type: object
      description: Model containing admin auth request info
      properties:
        role:
          type: string
          enum:
            - 'user'
            - 'admin'
            - 'manger'
            - 'supervisor'
            - 'moderator'
            - 'guide'
            - 'client'
          default: 'user'
        status:
          type: string
          enum:
            - 'pending'
            - 'active'
          default: 'active'
        firstName:
          type: string
          example: test
        lastName:
          type: string
          example: test
        email:
          type: string
          example: testverstion@gmail.com
        password:
          type: string
          example: 12345test
        confirmPassword:
          type: string
          example: 12345test
        acceptTerms:
          type: boolean
          default: true
        dateOfBirth:
          type: string
          example: '09/10/1984'
        gender:
          type: string
          example: male
        mobileNumber:
          type: string
          example: '+62213147666'
        bio:
          type: string
          example: 'Software Engineer experienced in developing full-stack JavaScript/Typescript application primarily with React/Next/Redux and Node/Express server design'

    AdminAuthResponse:
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
          required: true
        lastName:
          type: string
        email:
          type: string
          required: true
        dateOfBirth:
          type: string
        gender:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        profileUrl:
          type: string
        mobileNumber:
          type: string
        bio:
          type: string
        followings:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        followers:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        blocked:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/FollowUserScheme'
        isVerified:
          type: string
        status:
          type: string
        role:
          type: string
        acceptTerms:
          type: string

    ServerErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description:
        error:
          type: boolean
          example: true
        status:
          type: integer
          example: 500
        message:
          type: string
          example: Internal Server Error (different message based on request)
        data:
          type: object
          nullable: true
          example: null

    BadRequestResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description:
        error:
          type: boolean
          example: true
        status:
          type: integer
          example: between 400 - 500
        message:
          type: string
          example: Bad request (different message based on request)
        data:
          type: object
          nullable: true
          example: null

    DeprecatedApiResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description:
        error:
          type: boolean
          example: true
        status:
          type: integer
          example: 410
        message:
          type: string
          example: Deprecated API
        data:
          type: object
          nullable: true
          example: null

    SignUpResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description:
        error:
          type: boolean
          example: false
        status:
          type: integer
          example: 200
        message:
          type: string
          example: Auth Signup is success. An Email with Verification link has been sent to your account ${email} Please Verify Your Email first or use the email verification lik which is been send with the response body to verfiy your email
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                accessToken:
                  type: string
                refreshToken:
                  type: 'string'
                emailVerificationLinkToken:
                  type: string

    PostRequest:
      type: object
      description: Model containing post request info
      properties:
        category:
          type: string
          enum:
            - 'coding'
            - 'sports'
            - 'reactjs'
            - 'nextjs'
            - 'nodejs'
            - 'typescript'
            - 'devapp'
            - 'blockchain'
            - 'social'
          default: 'social'
        title:
          type: string
          example: Clean Architecture Review
        description:
          type: string
          example: Clean Architecture TypeScript Express API Book
        photoUrl:
          type: string
          format: url
          description: 'Post image URL (if no image file is uploaded)'
        postImage:
          type: string
          format: base64
          description: Upload post image (if no URL is provided) Image type /png/jpg/jpeg/webp
        required:
          - title
          - description
      oneOf:
        - required: [photoUrl]
        - required: [postImage]
    description: 'Either a photoUrl (URL) or imageFile (file) must be provided.'

    PostResponse:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        photoUrl:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        likes:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostLikeResponse'
        disLikes:
          type: array
          items: object
          '$ref': '#/components/schemas/PostLikeResponse'
        comments:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostCommentResponse'
        views:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostCommentResponse'
        shares:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostCommentResponse'
        author:
          type: object
          '$ref': '#/components/schemas/LikeAndCommentUser'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'

    AdminPostResponse:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        photoUrl:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        likes:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostLikeResponse'
        comments:
          type: array
          items:
            type: object
            '$ref': '#/components/schemas/PostCommentResponse'
        author:
          type: object
          '$ref': '#/components/schemas/AdminAuthResponse'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'

    PostCommentResponse:
      type: object
      properties:
        comment:
          type: string
        user:
          type: object
          '$ref': '#/components/schemas/LikeAndCommentUser'
        request:
          type: object
          '$ref': '#/components/schemas/ResponseAdditionalInfo'

    PostLikeResponse:
      type: object
      properties:
        user:
          type: object
          '$ref': '#/components/schemas/LikeAndCommentUser'

    addPostCommentRequest:
      type: object
      properties:
        postId:
          type: object
          example: 63db0cb558191bf1d20542d4
        comment:
          type: object
          example: comment

    updatePostCommentRequest:
      type: object
      properties:
        postId:
          type: object
          example: 63db0cb558191bf1d20542d4
        commentId:
          type: object
          example: 63db0cb558191bf1d20542d4
        comment:
          type: object
          example: comment

    DeletePostCommentRequest:
      type: object
      properties:
        postId:
          type: object
          example: 63db0cb558191bf1d20542d4
        commentId:
          type: object
          example: 63db0cb558191bf1d20542d4

    LikeAndCommentUser:
      type: object
      properties:
        _id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        profileUrl:
          type: string

    FollowUserScheme:
      type: object
      properties:
        _id:
          type: string
        userId:
          type: string
        firstName:
          type: string
          required: true
        lastName:
          type: string
        profileUrl:
          type: string

    ResponseAdditionalInfo:
      type: object
      properties:
        type:
          type: string
        description:
          type: string
        url:
          type: string

  securitySchemes:
    Authorization:
      type: http
      scheme: 'bearer'
      bearerFormat: 'JWT'
      value: 'Bearer <JWT token here>'
  security:
    - cookieAuth: []
